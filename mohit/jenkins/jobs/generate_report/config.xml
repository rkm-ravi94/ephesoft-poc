<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
source ${JENKINS_HOME}/scripts/git_functions.sh
source ${JENKINS_HOME}/scripts/jira_functions.sh
source ${JENKINS_HOME}/scripts/shell_functions.sh
source ${JENKINS_HOME}/config_files/JIRA.properties
rm -f ${WORKSPACE}/tmp_message
while read -r line
do
	rm -f ${WORKSPACE}/tmp_new_commits
    rm -f ${WORKSPACE}/tmp_new_commit_messages
    rm -f ${WORKSPACE}/tmp_jira_ids
    GIT_REPO=`echo $line | cut -d&apos; &apos; -f1`
    GIT_BRANCH=`echo $line | cut -d&apos; &apos; -f2`
    HEALTH_CHECK_URL=`echo $line | cut -d&apos; &apos; -f3`
    echo &quot;Working for Repo: ${GIT_REPO} and branch ${GIT_BRANCH}&quot;
    
    echo &quot;Checking Health Check URL..&quot;
    response=$(curl --write-out %{http_code} --silent --output /dev/null &quot;${HEALTH_CHECK_URL}&quot;)
    if [ &quot;${response}&quot; == &quot;200&quot; ]
    then
    	git clone ${GIT_REPO}
    	get_all_commits_from_last_commit &quot;${GIT_REPO}&quot; &quot;${GIT_BRANCH}&quot; &quot;${JENKINS_HOME}/config_files&quot; &quot;${WORKSPACE}&quot;
        if [ $? -eq 1 ]
        then
        	echo &quot;Project ${GIT_REPO} with branch ${GIT_BRANCH} | Component Stable | Listed below all JIRA ID&apos;s&quot; &gt;&gt; ${WORKSPACE}/tmp_message
            echo &quot;==============================================================================================================&quot; &gt;&gt; ${WORKSPACE}/tmp_message
            echo &quot;Now new commits..&quot; &gt;&gt; ${WORKSPACE}/tmp_message
            cd ${WORKSPACE}
        	continue
        fi
    	extract_commit_ids_from_commit_messages_file &quot;${WORKSPACE}&quot;
    	echo &quot;Project ${GIT_REPO} with branch ${GIT_BRANCH} | Component Stable | Listed below all JIRA ID&apos;s&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    	echo &quot;==============================================================================================================&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    	for commit_id in `cat ${WORKSPACE}/tmp_jira_ids | uniq`
    	do
    		echo &quot;Description for JIRA ID: ${commit_id}&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    		get_jira_fields_from_jira_id &quot;${JIRA_URL}&quot; &quot;${JIRA_USERNAME}&quot; &quot;${JIRA_PASSWORD}&quot; &quot;${commit_id}&quot; &quot;description&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    		echo &quot;----------------------------------------------------------------------------------------------------------&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    	done
    else
    	echo &quot;Project ${GIT_REPO} with branch ${GIT_BRANCH} | Component unstable&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    	echo &quot;==============================================================================================================&quot; &gt;&gt; ${WORKSPACE}/tmp_message
    fi
    GIT_DIR_NAME=`echo ${GIT_REPO} | xargs basename | xargs basename -s &apos;.git&apos;`
    git rev-parse HEAD &gt; &quot;${JENKINS_HOME}/config_files/lastCommit_${GIT_DIR_NAME}_${GIT_BRANCH}&quot;
    cd ${WORKSPACE}
done &lt; &quot;${JENKINS_HOME}/config_files/git_repos.txt&quot;

cat ${WORKSPACE}/tmp_message</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.32">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>